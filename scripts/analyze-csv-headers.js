// Script para analisar o arquivo CSV e extrair todas as op√ß√µes dos cabe√ßalhos

async function analyzeCsvHeaders() {
  try {
    console.log("üîç Analisando arquivo CSV...")

    const response = await fetch(
      "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/leadbroker%20jasson%20-%20Pa%CC%81gina1-ImqX7957BpVPGXQZnM3XOH2skC3e0u.csv",
    )
    const csvText = await response.text()

    console.log("üìÑ Arquivo carregado com sucesso!")

    // Dividir em linhas
    const lines = csvText.split("\n").filter((line) => line.trim() !== "")
    console.log(`üìä Total de linhas: ${lines.length}`)

    // Primeira linha s√£o os cabe√ßalhos
    const headers = lines[0].split(",").map((header) => header.trim().replace(/"/g, ""))
    console.log(`üìã Total de colunas: ${headers.length}`)

    console.log("\nüè∑Ô∏è === CABE√áALHOS ENCONTRADOS ===")
    headers.forEach((header, index) => {
      console.log(`${index + 1}. ${header}`)
    })

    // Analisar valores √∫nicos para cada coluna
    console.log("\nüìä === AN√ÅLISE DE VALORES √öNICOS POR COLUNA ===")

    const data = lines.slice(1).map((line) => {
      // Dividir linha respeitando aspas
      const values = []
      let current = ""
      let inQuotes = false

      for (let i = 0; i < line.length; i++) {
        const char = line[i]

        if (char === '"') {
          inQuotes = !inQuotes
        } else if (char === "," && !inQuotes) {
          values.push(current.trim())
          current = ""
        } else {
          current += char
        }
      }
      values.push(current.trim()) // √öltimo valor

      return values
    })

    // Analisar cada coluna
    headers.forEach((header, index) => {
      const values = data.map((row) => row[index] || "").filter((val) => val !== "" && val !== "-")
      const uniqueValues = [...new Set(values)].sort()

      if (uniqueValues.length > 0 && uniqueValues.length <= 50) {
        // S√≥ mostrar se tiver at√© 50 valores √∫nicos
        console.log(`\nüìå ${header}:`)
        uniqueValues.forEach((value) => {
          console.log(`   ‚Ä¢ ${value}`)
        })
        console.log(`   Total: ${uniqueValues.length} valores √∫nicos`)
      } else if (uniqueValues.length > 50) {
        console.log(`\nüìå ${header}: ${uniqueValues.length} valores √∫nicos (muitos para listar)`)
        console.log(`   Exemplos: ${uniqueValues.slice(0, 5).join(", ")}...`)
      }
    })

    // An√°lise espec√≠fica para campos importantes
    console.log("\nüéØ === AN√ÅLISE DETALHADA DE CAMPOS IMPORTANTES ===")

    const importantFields = [
      "STATUS",
      "ARREMATANTE",
      "SDR",
      "ORIGEM",
      "SEGMENTO",
      "PRODUTO",
      "AN√öNCIOS",
      "CLOSER",
      "URGENCIA",
      "CANAL",
    ]

    importantFields.forEach((fieldName) => {
      const index = headers.findIndex((h) => h.toUpperCase().includes(fieldName))
      if (index !== -1) {
        const values = data.map((row) => row[index] || "").filter((val) => val !== "" && val !== "-")
        const uniqueValues = [...new Set(values)].sort()

        console.log(`\nüî∏ ${headers[index]}:`)
        uniqueValues.forEach((value) => {
          const count = values.filter((v) => v === value).length
          console.log(`   ‚Ä¢ ${value} (${count}x)`)
        })
      }
    })
  } catch (error) {
    console.error("‚ùå Erro ao analisar CSV:", error)
  }
}

// Executar an√°lise
analyzeCsvHeaders()
